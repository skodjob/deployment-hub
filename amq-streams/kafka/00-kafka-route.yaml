---
apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: heimdall
  namespace: strimzi-kafka
  labels:
    clients: used
spec:
  kafka:
    version: 3.2.3
    replicas: 5
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: tls
        port: 9093
        type: internal
        tls: true
        authentication:
          type: tls
      - name: automation
        port: 9666
        type: route
        tls: true
        authentication:
          type: tls
    config:
      offsets.topic.replication.factor: 5
      transaction.state.log.replication.factor: 5
      transaction.state.log.min.isr: 3
      log.message.format.version: "3.1"
      inter.broker.protocol.version: "3.1"
    storage:
      volumes:
        - type: persistent-claim
          size: 200Gi
          id: 0
          class: standard-csi
      type: jbod
    authorization:
      type: simple
      superUsers:
        - CN=superuser-heimdall
        - superuser-heimdall
    resources:
      requests:
        memory: 5Gi
        cpu: "2"
      limits:
        memory: 5Gi
        cpu: "2"
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          key: heimdall-kafka-jmx-exporter-configuration.yaml
          name: heimdall-kafka-jmx-exporter-configuration
    template:
      pod:
        tolerations:
          - key: "nodetype"
            operator: "Equal"
            value: "kafka"
            effect: "NoSchedule"
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                    - key: nodetype
                      operator: In
                      values:
                        - kafka
        topologySpreadConstraints:
          # Deploy Kafka pods with spread with difference max 1 pod
          - maxSkew: 1
            # All nodes with same key are considered as one group, so we should pick a key, which has different values on the nodes
            topologyKey: kubernetes.io/hostname
            whenUnsatisfiable: DoNotSchedule
            labelSelector:
              matchLabels:
                # label on Kafka pods
                strimzi.io/name: heimdall-kafka
  zookeeper:
    replicas: 3
    storage:
      type: persistent-claim
      size: 50Gi
      class: standard-csi
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          key: heimdall-zookeeper-jmx-exporter-configuration.yaml
          name: heimdall-zookeeper-jmx-exporter-configuration
    template:
      pod:
        tolerations:
          - key: "nodetype"
            operator: "Equal"
            value: "kafka"
            effect: "NoSchedule"
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                    - key: nodetype
                      operator: In
                      values:
                        - kafka
        topologySpreadConstraints:
          # Deploy Zookeeper pods with spread with difference max 2 pod
          - maxSkew: 2
            # All nodes with same key are considered as one group, so we should pick a key, which has different values on the nodes
            topologyKey: kubernetes.io/hostname
            whenUnsatisfiable: DoNotSchedule
            labelSelector:
              matchLabels:
                # label on Zookeper pods
                strimzi.io/kind: Kafka
  entityOperator:
    template:
      pod:
        tolerations:
          - key: "nodetype"
            operator: "Equal"
            value: "kafka"
            effect: "NoSchedule"
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                    - key: nodetype
                      operator: In
                      values:
                        - kafka
        topologySpreadConstraints:
          # Deploy Zookeeper pods with spread with difference max 2 pod
          - maxSkew: 2
            # All nodes with same key are considered as one group, so we should pick a key, which has different values on the nodes
            topologyKey: kubernetes.io/hostname
            whenUnsatisfiable: DoNotSchedule
            labelSelector:
              matchLabels:
                # label on Zookeper pods
                strimzi.io/kind: Kafka
    topicOperator:
      resources:
        limits:
          cpu: '1'
          memory: 256Mi
        requests:
          cpu: '0.2'
          memory: 256Mi
    userOperator:
      resources:
        limits:
          cpu: '1'
          memory: 512Mi
        requests:
          cpu: '0.2'
          memory: 512Mi
  kafkaExporter:
    template:
      pod:
        tolerations:
          - key: "nodetype"
            operator: "Equal"
            value: "kafka"
            effect: "NoSchedule"
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                    - key: nodetype
                      operator: In
                      values:
                        - kafka
        topologySpreadConstraints:
          # Deploy Zookeeper pods with spread with difference max 2 pod
          - maxSkew: 2
            # All nodes with same key are considered as one group, so we should pick a key, which has different values on the nodes
            topologyKey: kubernetes.io/hostname
            whenUnsatisfiable: DoNotSchedule
            labelSelector:
              matchLabels:
                # label on Zookeper pods
                strimzi.io/kind: Kafka
  cruiseControl:
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          key: heimdall-cruise-control-jmx-exporter-configuration.yaml
          name: heimdall-cruise-control-jmx-exporter-configuration
    template:
      pod:
        tolerations:
          - key: "nodetype"
            operator: "Equal"
            value: "kafka"
            effect: "NoSchedule"
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                    - key: nodetype
                      operator: In
                      values:
                        - kafka
        topologySpreadConstraints:
          # Deploy Zookeeper pods with spread with difference max 2 pod
          - maxSkew: 2
            # All nodes with same key are considered as one group, so we should pick a key, which has different values on the nodes
            topologyKey: kubernetes.io/hostname
            whenUnsatisfiable: DoNotSchedule
            labelSelector:
              matchLabels:
                # label on Zookeper pods
                strimzi.io/kind: Kafka
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: heimdall-kafka-jmx-exporter-configuration
data:
  heimdall-kafka-jmx-exporter-configuration.yaml: |
    lowercaseOutputName: true
    rules:
    - pattern: "kafka.server<type=(.+), name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value"
      name: "kafka_server_$1_$2"
      type: "GAUGE"
      labels:
        clientId: "$3"
        topic: "$4"
        partition: "$5"
    - pattern: "kafka.server<type=(.+), name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value"
      name: "kafka_server_$1_$2"
      type: "GAUGE"
      labels:
        clientId: "$3"
        broker: "$4:$5"
    - pattern: "kafka.server<type=(.+), cipher=(.+), protocol=(.+), listener=(.+), networkProcessor=(.+)><>connections"
      name: "kafka_server_$1_connections_tls_info"
      type: "GAUGE"
      labels:
        listener: "$2"
        networkProcessor: "$3"
        protocol: "$4"
        cipher: "$5"
    - pattern: "kafka.server<type=(.+), clientSoftwareName=(.+), clientSoftwareVersion=(.+),\
        \ listener=(.+), networkProcessor=(.+)><>connections"
      name: "kafka_server_$1_connections_software"
      type: "GAUGE"
      labels:
        clientSoftwareName: "$2"
        clientSoftwareVersion: "$3"
        listener: "$4"
        networkProcessor: "$5"
    - pattern: "kafka.server<type=(.+), listener=(.+), networkProcessor=(.+)><>(.+):"
      name: "kafka_server_$1_$4"
      type: "GAUGE"
      labels:
        listener: "$2"
        networkProcessor: "$3"
    - pattern: "kafka.server<type=(.+), listener=(.+), networkProcessor=(.+)><>(.+)"
      name: "kafka_server_$1_$4"
      type: "GAUGE"
      labels:
        listener: "$2"
        networkProcessor: "$3"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+)Percent\\w*><>MeanRate"
      name: "kafka_$1_$2_$3_percent"
      type: "GAUGE"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+)Percent\\w*><>Value"
      name: "kafka_$1_$2_$3_percent"
      type: "GAUGE"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+)Percent\\w*, (.+)=(.+)><>Value"
      name: "kafka_$1_$2_$3_percent"
      type: "GAUGE"
      labels:
        $4: "$5"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+)PerSec\\w*, (.+)=(.+), (.+)=(.+)><>Count"
      name: "kafka_$1_$2_$3_total"
      type: "COUNTER"
      labels:
        $4: "$5"
        $6: "$7"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+)PerSec\\w*, (.+)=(.+)><>Count"
      name: "kafka_$1_$2_$3_total"
      type: "COUNTER"
      labels:
        $4: "$5"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+)PerSec\\w*><>Count"
      name: "kafka_$1_$2_$3_total"
      type: "COUNTER"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Value"
      name: "kafka_$1_$2_$3"
      type: "GAUGE"
      labels:
        $4: "$5"
        $6: "$7"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+), (.+)=(.+)><>Value"
      name: "kafka_$1_$2_$3"
      type: "GAUGE"
      labels:
        $4: "$5"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+)><>Value"
      name: "kafka_$1_$2_$3"
      type: "GAUGE"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Count"
      name: "kafka_$1_$2_$3_count"
      type: "COUNTER"
      labels:
        $4: "$5"
        $6: "$7"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+), (.+)=(.*), (.+)=(.+)><>(\\d+)thPercentile"
      name: "kafka_$1_$2_$3"
      type: "GAUGE"
      labels:
        $4: "$5"
        $6: "$7"
        quantile: "0.$8"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+), (.+)=(.+)><>Count"
      name: "kafka_$1_$2_$3_count"
      type: "COUNTER"
      labels:
        $4: "$5"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+), (.+)=(.*)><>(\\d+)thPercentile"
      name: "kafka_$1_$2_$3"
      type: "GAUGE"
      labels:
        $4: "$5"
        quantile: "0.$6"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+)><>Count"
      name: "kafka_$1_$2_$3_count"
      type: "COUNTER"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+)><>(\\d+)thPercentile"
      name: "kafka_$1_$2_$3"
      type: "GAUGE"
      labels:
        quantile: "0.$4"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: heimdall-zookeeper-jmx-exporter-configuration
data:
  heimdall-zookeeper-jmx-exporter-configuration.yaml: |
    lowercaseOutputName: true
    rules:
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+)><>(\\w+)"
      name: "zookeeper_$2"
      type: "GAUGE"
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\\
        d+)><>(\\w+)"
      name: "zookeeper_$3"
      type: "GAUGE"
      labels:
        replicaId: "$2"
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\\
        d+), name2=(\\w+)><>(Packets\\w+)"
      name: "zookeeper_$4"
      type: "COUNTER"
      labels:
        replicaId: "$2"
        memberType: "$3"
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\\
        d+), name2=(\\w+)><>(\\w+)"
      name: "zookeeper_$4"
      type: "GAUGE"
      labels:
        replicaId: "$2"
        memberType: "$3"
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\\
        d+), name2=(\\w+), name3=(\\w+)><>(\\w+)"
      name: "zookeeper_$4_$5"
      type: "GAUGE"
      labels:
        replicaId: "$2"
        memberType: "$3"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: heimdall-cruise-control-jmx-exporter-configuration
data:
  heimdall-cruise-control-jmx-exporter-configuration.yaml: |
    lowercaseOutputName: true
    rules:
    - pattern: "kafka.cruisecontrol<name=(.+)><>(\\w+)"
      name: "kafka_cruisecontrol_$1_$2"
      type: "GAUGE"
